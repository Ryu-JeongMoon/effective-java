package chap09.item67;

/**
 * 최적화는 신중히 하라
 */
public class Item67 {

}

/*
성능은 중요하다, 다만 구조가 더 중요하다
그렇기에 섣부른 최적화는 똥과 같다
성능을 높이지도 못 하면서 객체지향 패러다임을 깨트릴 수 있으며 가독성도 개 같아진다
최적화를 수행할 때는 최적화 아니면 안 되겠다 싶을 때 수행을 고려하고 하더라도 성능 테스트 필수다

H/W 성능의 급격한 발전으로 웬만한 프로그램에서는 빠른 프로그램보다 좋은 프로그램이 낫다
순수 JVM 위에서도 잘 돌아간다 이 말씀, 근데 이 놈이 발전 중?!
GraalVM 으로 바꾸기만 해도 10-40%의 성능 향상
게다가 polyglot 지원함으로써 JRE 힘을 빌리지 않고도 기존의 네이티브 메서드 호출 가능
Boot speed 올려 서버리스에서도 유용하게 사용할 수 있다
다만 단점으로 런타임 객체 생성이 어렵거나 안 된다고 들었듬, 추후 알아볼 것

성능 향상이 정말 필요하다면 최적화 수행 후 측정한다
성능을 오히려 떨어뜨리는 경우도 있으니 주의해야 한다
최적화가 항상 성능 향상으로 이끄는 것은 아닌데 compiler 의 동작 방식을 완전히 이해할 수 없기 때문
H/W 를 직접 건드리는게 아니어서 어느 정도까지 향상이 이루어질 지 알 수 없다
요런 때 알고리즘의 중요성이 등장한다
알고리즘 달인이 될 필요는 없지만 시간 복잡도는 어느 정도 파악할 수 있어야 한다
즉 성능을 위해 좋은 설계를 박살내는 것은 빈대 잡으려 초가 삼간 태운다는 것!
 */