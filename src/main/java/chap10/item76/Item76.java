package chap10.item76;

/**
 * 가능한 한 실패 원자적으로 만들라
 */
public class Item76 {

  public static void main(String[] args) {

  }
}

/*
호출된 메서드가 실패하더라도 해당 객체는 메서드 호출 전 상태를 유지해야 한다
이를 failure-atomic, 실패 원자적이라 한다

JPA 를 이용해 프로그램 작성 시 특히 주의해야 함
TX 끝나는 시점에 dirty-checking 후 업데이트 치기 때문에 예외 터지고 잡은 후
객체를 원래 상태로 돌려놔야 수정 되지 않는다
이를 매번 신경 쓰기 어려우니 수정을 가하기 전 매개변수, 객체 유효성 검사 후 수정 한다
즉 예외를 먼저 터트려서 early-fail 시키고 예외가 터지지 않는 상황에서만 수정

실패 원자적으로 수행하기 위한 방법
1. 불변 객체 사용
2. 작업 수행 전 매개변수의 유효성 검사
3. 객체의 복사본을 만들어 작업 수행 후 문제 없을 시 기존 객체와 교체
4. 작업 중 발생하는 실패를 가로채 이전 상태로 복구하는 코드 작성

위 방법을 사용해 실패 원자성을 보장해주면 좋지만 1 -> 2 -> 3 -> 4 단계로 갈수록
코드가 장황해지고 일일이 다 챙겨줘야하는 불편함이 있다
따라서 기본은 원자성을 보장해주되
성능 상의 문제로 메서드에서 그냥 던지고 명세에서 원자성을 지키지 못함을 명시할 수도 있다
단 이는 책임을 클라이언트에 넘기는 것이므로 중복된 코드가 늘 수도 있겠다?!
요런 API 를 사용할 때는 TX 로 묶고 얘 하나만 수행하는 것이 낫겠다
 */