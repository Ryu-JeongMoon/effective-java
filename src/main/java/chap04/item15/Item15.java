package chap04.item15;

/**
 * 클래스와 멤버의 접근 권한을 최소화하라
 */
public class Item15 {

  public static void main(String[] args) {

  }
}

/*
추상화의 기본 단위 class, interface 는 자바의 심장?!

컴포넌트를 잘 설계했는지 기준이 되는 것은 내부 데이터를 잘 숨겨서 구현과 API 를 깔끔하게 분리했는지다
흔히들 캡슐화라 부르는 것이 바로 이 개념!!
분리가 잘 되면 병렬적으로 개발할 수 있기 때문에 개발 속도가 올라가고, 시스템 재사용성을 높여준다
개별 컴포넌트의 동작을 검증할 수 있으므로 큰 시스템을 잘게 쪼개어 개발하기 편해진다

직접적으로 사용되는 부분을 최소한으로 줄이면 특정 기능에 문제가 생기거나 수정할 때 고 부분만 언넝 파악해서 변경 가능
객체지향 패러다임에서 그토록 찾아 헤매는 재사용성, 개발 독립성 등을 충족시키는데 필수적이다
전체적인 흐름에서 애플리케이션의 복잡성은 서비스가 성장할수록 커지고 일정 수준 이상에서는 단일 시스템으로는 커버 불가능한 수준
마이크로서비스가 핫해지는 이유이고 이는 재사용성, 독립성을 서비스 레벨까지 높인 형태다

어떻게 실현할 수 있는가
접근 권한을 최소화한다, 클래스 외부에서 인스턴스 필드를 변경하지 못 하도록 하면 굳굳
사용자에게 공개하는 API 는 함부러 수정할 수 없다
package-private 으로 해놓은 경우는 내부 구현으로써 호환성에 발목 잡히지 않고 언제든 수정 가능하다
클래스 레벨에서 내부에 private static class / interface 를 왜 넣는가 했더니 이런 이유가 있구만

공개해야할 것을 공개하지 않는 것보다, 공개하지 말아야 할 것을 공개할 때 손해가 더 크다
공개하지 않은 것은 따로 빼내서 public 으로 만들면 그만인데 이미 코드 전체에 흩뿌려진 것을 주워 담기는 힘들다
API 만들더라도 정말 공개해야하는 부분인지 고민해보자 (API 에 내부 구현이 침투하는 걸 막을 수도 있다)

private - 본인만 사용
package-private (default) - 동일 패키지 내에서만 공개
protected - (package-private + 상속 받은 녀석들) 에게 공개, 언뜻 보면 제약이 있어보이지만 따져보면 얘도 public 에 가까움
public - 개나 소나 사용
 */